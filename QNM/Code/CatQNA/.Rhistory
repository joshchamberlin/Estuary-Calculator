#In Degree: measures the total connections that flow into a node
in_degree <- as.data.frame(degree(e_igraph, mode = c('in')))%>%
rownames_to_column()
#Out Degree: measures the total connections that flow out of a node
out_degree <- as.data.frame(degree(e_igraph, mode = c('out')))%>%
rownames_to_column()
#Closeness Centrality: measures the closeness of one node to all other nodes in the network
#A high value means that a node, on average, can reach all other nodes in a few steps.
closeness <- as.data.frame(closeness(e_igraph, vids = V(e_igraph), mode = 'in')) %>%
rownames_to_column()
#Betweenness Centrality: measures the importance of a node in calculating the shortest paths
#of all nodes in a network. A high value means that a node, if removed from the network,
#will make the shortest path calculation longer for many other nodes in the network.
#It is calculated as the number of shortest paths that pass through the node.
between <- as.data.frame(betweenness(e_igraph, v = V(e_igraph), directed = T)) %>%
rownames_to_column()
#Eigenvector Centrality (sometimes called PageRank Centrality) measures the influence a node
#has on a network. A node has high influence if it is connected to many nodes who themselves
#have high influences.
eigen <- as.data.frame(eigen_centrality(e_igraph, directed = T)$vector) %>%
rownames_to_column()
#(Local) Clustering Coefficient measures how close the neighbors of a node all connect to
#each other, and thus how embedded a node is in its local networks. It is also called the
#local clustering coefficient.
cluster <- as.data.frame(transitivity(e_igraph, type = 'local')) %>%
rownames_to_column()
node_summary <- merge(degree, in_degree, by = "rowname") %>%
merge(out_degree, closeness, by = "rowname") %>%
merge(between, eigen, by = "rowname") %>%
merge(cluster, by = "rowname")
View(between)
View(closeness)
View(cluster)
View(degree)
View(degrees)
View(df_list)
View(eigen)
View(in_degree)
node_summary <- merge(degree, in_degree, by = "rowname") #%>%
node_summary <- merge(degree, in_degree, by = "rowname") %>%
merge(out_degree, closeness, by = "rowname")#%>%
node_summary <- merge(degree, in_degree, by = "rowname") %>%
merge(out_degree)#%>%
node_summary <- merge(degree, in_degree, by = "rowname") %>%
merge(out_degree) %>%
merge(closeness)
View(node_summary)
node_summary <- merge(degree, in_degree, by = "rowname") %>%
merge(out_degree) %>%
merge(closeness) %>%
merge(between) %>%
merge(eigen) %>%
merge(cluster)
View(node_summary)
View(degree)
#Node Metrics
#Total Degree: measures the total connections of a node, regardless of direction of connections
#note that the feedback loops count as 2 connections
degree <- as.data.frame(degree(e_igraph)) %>%
rownames_to_column() %>%
rename(2 = t)
#Node Metrics
#Total Degree: measures the total connections of a node, regardless of direction of connections
#note that the feedback loops count as 2 connections
degree <- as.data.frame(degree(e_igraph)) %>%
rownames_to_column()
test <- node_summary %>%
rename(rowname = node)
test <- node_summary %>%
rename(rowname, node)
#rename columns
colnames(node_summary) <- c("node", "degree", "in degree", "out degree", "closeness",
"betweeness", "eigan", "cluster")
library(writexl)
#export to excel
write_csv(node_summary, "node_summary.csv")
#Generally I prefer to use projects and the here package rather than setting wd, but for some
#reason I couldn't get the dea functions to run with here
setwd("C:\\Users\\Catalina.Burch\\Documents\\GitHub\\Estuary-Calculator\\Code\\CatQNA")
library(XML)
library(tcltk2)
library(QPress)
library(dplyr)
library(plyr)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(igraph)
library(network)
library(intergraph)
#Estuary Model
estuary<-model.dia("test.dia")
simestuary <- system.simulate(10000, estuary)
simestuary <- system.simulate(1000, estuary)
setwd("C:\\Users\\Catalina.Burch\\Documents\\GitHub\\Estuary-Calculator\\Code\\CorreighQNA")
#Run model and generate simulations
#example
ss <- model.dia("SSv7.dia")
simtest <- system.simulate(10000, ss)
View(estuary)
View(estuary)
View(simtest)
#Generally I prefer to use projects and the here package rather than setting wd, but for some
#reason I couldn't get the dea functions to run with here
setwd("C:\\Users\\Catalina.Burch\\Documents\\GitHub\\Estuary-Calculator\\Code\\CatQNA")
simestuary <- system.simulate(1000, estuary)
simestuary <- system.simulate(1, estuary)
simtest <- system.simulate(10000, ss)
system.simulate=function (n.sims, edges, required.groups = c(0), validators = NULL)
{
As <- vector("list", n.sims)
ws <- matrix(0, n.sims, nrow(edges))
s <- community.sampler(edges, required.groups)
total <- 0
stable <- 0
accepted <- 0
while (accepted < n.sims) {
total <- total + 1
z <- s$select(rnorm(1,0,2))
W <- s$community()
if (!stable.community(W))
next
stable <- stable + 1
if (!all(as.logical(lapply(validators, function(v) v(W)))))
next
accepted <- accepted + 1
As[[accepted]] <- -solve(W)
ws[accepted, ] <- s$weights(W)
}
colnames(ws) <- s$weight.labels
list(edges = edges, A = As, w = ws, total = total, stable = stable,
accepted = accepted)
}
simtest <- system.simulate(10000, ss)
simestuary <- system.simulate(1, estuary)
View(estuary)
View(ss)
#Estuary Model
estuary<-model.dia("test.dia")
#Estuary Model
estuary<-model.dia("test.dia")
simestuary <- system.simulate(1, estuary)
simestuary <- system.simulate(10000, estuary)
simestuary$total #
simestuary$As
#Output (inverse community matrices)
simSS$As
simSS <- simtest
#Output (inverse community matrices)
simSS$As
#Potential edges
PotEdge=length(nodes)*length(nodes)
#Load Model
estuary<-model.dia("test.dia")
#load dia network
e_edgelist <- estuary %>%
select(From, To)
#convert to igraph format
e_igraph = graph_from_data_frame(e_edgelist, directed = T)
estuary<-model.dia("V1Directed")
#Run Model and Generate Simulations
estuary<-model.dia("test.dia")
estuary<-model.dia("V1Directed")
estuary<-model.dia("V1Directed")
estuary<-model.dia("V1Directed.dia")
estuary<-model.dia("V1Directed.dia")
simestuary <- system.simulate(10000, estuary)    #note: the model won't run unless all the nodes have a feedback loop
simestuary$total #19686 runs to produce 10000 accepted runs
estuary<-model.dia("V1Directed.dia")
simestuary <- system.simulate(10000, estuary)    #note: the model won't run unless all the nodes have a feedback loop
simestuary$total #19686 runs to produce 10000 accepted runs
estuary<-model.dia("V1Directed.dia")
simestuary <- system.simulate(10000, estuary)    #note: the model won't run unless all the nodes have a feedback loop
simestuary$total #19686 runs to produce 10000 accepted runs
estuary<-model.dia("V1Directed.dia")
simestuary <- system.simulate(10000, estuary)    #note: the model won't run unless all the nodes have a feedback loop
simestuary <- system.simulate(1, estuary)    #note: the model won't run unless all the nodes have a feedback loop
estuary<-model.dia("V1Directed.dia")
simestuary <- system.simulate(10000, estuary)    #note: the model won't run unless all the nodes have a feedback loop
simestuary$total #19686 runs to produce 10000 accepted runs
#load dia network
e_edgelist <- estuary %>%
select(From, To)
#convert to igraph format
e_igraph = graph_from_data_frame(e_edgelist, directed = T)
#Node Metrics
#Total Degree: measures the total connections of a node, regardless of direction of connections
#note that the feedback loops count as 2 connections
degree <- as.data.frame(degree(e_igraph)) %>%
rownames_to_column()
#load libraries
library(XML)
library(tcltk2)
library(QPress)
library(dplyr)
library(plyr)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(tidyverse)
library(igraph) #network analysis
library(network)
library(intergraph)
View(estuary)
#load dia network
e_edgelist <- estuary %>%
select(From, To)
#convert to igraph format
e_igraph = graph_from_data_frame(e_edgelist, directed = T)
#Node Metrics
#Total Degree: measures the total connections of a node, regardless of direction of connections
#note that the feedback loops count as 2 connections
degree <- as.data.frame(degree(e_igraph)) %>%
rownames_to_column()
#In Degree: measures the total connections that flow into a node
in_degree <- as.data.frame(degree(e_igraph, mode = c('in')))%>%
rownames_to_column()
#Out Degree: measures the total connections that flow out of a node
out_degree <- as.data.frame(degree(e_igraph, mode = c('out')))%>%
rownames_to_column()
closeness <- as.data.frame(closeness(e_igraph, vids = V(e_igraph), mode = 'in')) %>%
rownames_to_column()
between <- as.data.frame(betweenness(e_igraph, v = V(e_igraph), directed = T)) %>%
rownames_to_column()
eigen <- as.data.frame(eigen_centrality(e_igraph, directed = T)$vector) %>%
rownames_to_column()
cluster <- as.data.frame(transitivity(e_igraph, type = 'local')) %>%
rownames_to_column()
#Merge node data into one df
node_summary <- merge(degree, in_degree, by = "rowname") %>%
merge(out_degree) %>%
merge(closeness) %>%
merge(between) %>%
merge(eigen) %>%
merge(cluster)
#rename columns
colnames(node_summary) <- c("node", "degree", "in degree", "out degree", "closeness",
"betweeness", "eigan", "cluster")
node_summary %>%
ggplot(aes(x=degree, y = fct_reorder(node, degree))) +
geom_col()+
theme_minimal()+
ggtitle("Degree")
#Degrees
node_summary %>%
pivot_longer(cols = c(`in degree`:`out degree`), names_to = "in_out", values_to = "degrees") %>%
ggplot(aes(x=degrees, y = fct_reorder(node, degree), fill = in_out)) +
geom_bar(position = "stack", stat = "identity")+
scale_x_continuous(expand = c(0,0))+
labs(y = "Node")+
theme_minimal()+
ggtitle("QNM Node Degree")
#Closeness
node_summary %>%
na.omit() %>%
ggplot(aes(x=closeness, y = fct_reorder(node, closeness)))+
geom_col()+
scale_x_continuous(expand = c(0,0))+
labs(y = "Node")+
theme_minimal()+
ggtitle("QNM Closeness Centrality")
#Betweeness
node_summary %>%
na.omit() %>%
ggplot(aes(x=betweeness, y = fct_reorder(node, betweeness)))+
geom_col()+
scale_x_continuous(expand = c(0,0))+
labs(y = "Node")+
theme_minimal()+
ggtitle("QNM Betweeness Centrality")
#Eigen
node_summary %>%
na.omit() %>%
ggplot(aes(x=eigan, y = fct_reorder(node, eigan)))+
geom_col()+
scale_x_continuous(expand = c(0,0))+
labs(y = "Node")+
theme_minimal()+
ggtitle("QNM Eigenvector Centrality")
#Cluster
node_summary %>%
na.omit() %>%
ggplot(aes(x=cluster, y = fct_reorder(node, cluster)))+
geom_col()+
scale_x_continuous(expand = c(0,0))+
labs(y = "Node")+
theme_minimal()+
ggtitle("QNM Clustering Coefficient")
length(unique(estuary$To))
length(unique(estuary$From))
View(degree)
mean(degree$`degree(e_igraph)`)
150/(33*32/2)
150/(33*(32/2))
33*32/2
33!
34*34
#Network Clustering Coefficient
transitivity(e_igraph, type = "global")
#Run Model and Generate Simulations
estuary<-model.dia("V1Directed.dia")
simestuary <- system.simulate(10000, estuary)    #note: the model won't run unless all the nodes have a feedback loop
#Examples in this vignette for how widget works and interpretation
vignette("Mesocosm")
impact.barplot(simestuary)
impact.barplot(simSS)
impact.barplot(simestuary)
impact.barplot(simSS)
impact.barplot(simestuary)
impact.barplot(simestuary)
simestuary$total #19686 runs to produce 10000 accepted runs
# Extract the bits we need
edges <- simestuary$edges
As <- simestuary$A
nodes <- node.labels(edges)
monitor <- c(rep(NA,length(nodes))) ## Don't enforce any required responses
#Call specific nodes of interest
#To show only a subset of node responses (e.g. Survival, Abundance, and Other Salmon), run this instead of standard plot:
myplot <- function(nodes,As,perturb,monitor,epsilon=1.0E-5,main="",cex.axis=1) {
pal <- c("firebrick4", "#808080", "lightblue")
results <- matrix(0,length(nodes),3)
for(i in 1:length(As)) {
impact <- signum(drop(As[[i]]%*%perturb),epsilon=epsilon)
if(all(monitor==impact,na.rm=T)) {
results <- results + outer(impact,-1:1,'==')
}
}
rownames(results) <- nodes
nodes <- nodes[c(19, 23,7, 25, 1, 28)]
results <- results[c(19, 23,7, 25,1, 28),]
lwidth <- max(strwidth(nodes,units="inches",cex=cex.axis))
opar <- par(mai=c(0.5,lwidth+0.15,0.15,0.15)+0.2)
barplot(t(results),horiz=T,las=1,border=F,col=pal,
xlab="Simulations",main=main,cex.axis=cex.axis)
par(opar)
}
myplot
Indiv_Perturb="C:\\Users\\Catalina.Burch\\Documents\\GitHub\\Estuary-Calculator\\Code\\CatQNA\\CatQNA.pdf"
pdf(file=Indiv_Perturb)
# For function
opar <- par
par(mfrow=c(2,2)) #This can be invoked for a 2x2 layout (better for simple (reduced vars) plot)
for (i in 1:34) {
#i=2
#Set up desired directions of perturbations--based upon direction of press (-1,1)
#For all presses
press=c(-1,1,1,-1,1,-1,-1,-1,1,1,1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1, 1) #33
#length(press)
presses=diag(press, nrow=33, ncol=33)
perturb=presses[i,]
perturb2=ifelse(perturb==1,"(Increase)","(Decrease)")
#If all press perturbs are positive, use this code:
#perturb <- c(rep(0,length(nodes)))
#perturb[i] <- 1 ## perturb the ith node, this is a positive perturbation
#Choose: all nodes (impact.barplot.action) or a subset of nodes (myplot)--myplot code below
#impact.barplot.action(nodes,As,perturb,monitor,main=c(nodes[i],perturb[i]))
myplot(nodes,As,perturb,monitor,main=c(nodes[i],perturb2[i]))
}
length(unique(estuary$To))
Indiv_Perturb="C:\\Users\\Catalina.Burch\\Documents\\GitHub\\Estuary-Calculator\\Code\\CatQNA\\CatQNA.pdf"
pdf(file=Indiv_Perturb)
# For function
opar <- par
par(mfrow=c(2,2)) #This can be invoked for a 2x2 layout (better for simple (reduced vars) plot)
for (i in 1:34) {
#i=2
#Set up desired directions of perturbations--based upon direction of press (-1,1)
#For all presses
press=c(-1,1,1,-1,1,-1,-1,-1,1,1,1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1, 1) #33
#length(press)
presses=diag(press, nrow=33, ncol=33)
perturb=presses[i,]
perturb2=ifelse(perturb==1,"(Increase)","(Decrease)")
#If all press perturbs are positive, use this code:
#perturb <- c(rep(0,length(nodes)))
#perturb[i] <- 1 ## perturb the ith node, this is a positive perturbation
#Choose: all nodes (impact.barplot.action) or a subset of nodes (myplot)--myplot code below
#impact.barplot.action(nodes,As,perturb,monitor,main=c(nodes[i],perturb[i]))
myplot(nodes,As,perturb,monitor,main=c(nodes[i],perturb2[i]))
}
#length(press)
presses=diag(press, nrow=34, ncol=34)
for (i in 1:34) {
#i=2
#Set up desired directions of perturbations--based upon direction of press (-1,1)
#For all presses
press=c(-1,1,1,-1,1,-1,-1,-1,1,1,1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1, 1) #33
#length(press)
presses=diag(press, nrow=34, ncol=34)
perturb=presses[i,]
perturb2=ifelse(perturb==1,"(Increase)","(Decrease)")
#If all press perturbs are positive, use this code:
#perturb <- c(rep(0,length(nodes)))
#perturb[i] <- 1 ## perturb the ith node, this is a positive perturbation
#Choose: all nodes (impact.barplot.action) or a subset of nodes (myplot)--myplot code below
#impact.barplot.action(nodes,As,perturb,monitor,main=c(nodes[i],perturb[i]))
myplot(nodes,As,perturb,monitor,main=c(nodes[i],perturb2[i]))
}
par(opar)
dev.off()
simestuary$A
View(simestuary)
Indiv_Perturb="C:\\Users\\Catalina.Burch\\Documents\\GitHub\\Estuary-Calculator\\Code\\CatQNA\\CatQNA.pdf"
pdf(file=Indiv_Perturb)
# For function
opar <- par
par(mfrow=c(2,2)) #This can be invoked for a 2x2 layout (better for simple (reduced vars) plot)
for (i in 1:34) {
#i=2
#Set up desired directions of perturbations--based upon direction of press (-1,1)
#For all presses
press=c(-1,1,1,-1,1,-1,-1,-1,1,1,1,1,1,-1,1,1,1,1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1, 1) #33
#length(press)
presses=diag(press, nrow=34, ncol=34)
perturb=presses[i,]
perturb2=ifelse(perturb==1,"(Increase)","(Decrease)")
#If all press perturbs are positive, use this code:
#perturb <- c(rep(0,length(nodes)))
#perturb[i] <- 1 ## perturb the ith node, this is a positive perturbation
#Choose: all nodes (impact.barplot.action) or a subset of nodes (myplot)--myplot code below
impact.barplot.action(nodes,As,perturb,monitor,main=c(nodes[i],perturb[i]))
#myplot(nodes,As,perturb,monitor,main=c(nodes[i],perturb2[i]))
}
#Interactive Widget to explore node perturbations
impact.barplot(simestuary)
#Interactive Widget to explore node perturbations
impact.barplot(simestuary)
#Interactive Widget to explore node perturbations
impact.barplot(simestuary)
#Run Model and Generate Simulations
estuary<-model.dia("V1Directed.dia")
simestuary <- system.simulate(10000, estuary)    #note: the model won't run unless all the nodes have a feedback loop
simestuary$total #19686 runs to produce 10000 accepted runs
#Interactive Widget to explore node perturbations
impact.barplot(simestuary)
#Eigen
node_summary %>%
na.omit() %>%
ggplot(aes(x=eigan, y = fct_reorder(node, eigan)))+
geom_col()+
scale_x_continuous(expand = c(0,0))+
labs(y = "Node")+
theme_minimal()+
ggtitle("QNM Eigenvector Centrality")
node_summary %>%
ggplot(aes(x=degree, y = fct_reorder(node, degree))) +
geom_col()+
theme_minimal()+
ggtitle("Degree")
#Generally I prefer to use projects and the here package rather than setting wd, but for some
#reason I couldn't get the dea functions to run with here
setwd("C:\\Users\\Catalina.Burch\\Documents\\GitHub\\Estuary-Calculator\\Code\\CatQNA")
#--------------------------------------
## QNM Analysis
#--------------------------------------
#This code is for installing QPress off of GitHub
#options(repos = c(SCAR = "https://scar.r-universe.dev",
#                  CRAN = "https://cloud.r-project.org"))
#install.packages("QPress")
#load libraries
library(XML)
library(tcltk2)
library(QPress)
library(dplyr)
library(plyr)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(igraph)
library(network)
library(intergraph)
#Run Model and Generate Simulations
estuary<-model.dia("V1Directed.dia")
simestuary <- system.simulate(10000, estuary)    #note: the model won't run unless all the nodes have a feedback loop
simestuary$total #19686 runs to produce 10000 accepted runs
#Interactive Widget to explore node perturbations
impact.barplot(simestuary)
#Extract the weight values in the accepted model runs
simestuary$edges
head(simestuary$w)
tail(simestuary$w)
mean(abs(simestuary$w))
is.matrix(simestuary$w)
weight <- as.data.frame(simestuary$w)
hist(weight)
hist(weight[,66])
ggplot(weight, aes())+
geom_histogram()
View(weight)
hist(weight[,1])
hist(weight[,2])
hist(weight[,3])
hist(weight[,4])
hist(weight[,5])
hist(weight[,6])
hist(weight[,7])
hist(weight[,8])
hist(weight[,9])
hist(weight[,10])
hist(weight[,11])
hist(weight[12])
hist(weight[13])
hist(weight[14])
hist(weight[15
])
hist(weight[16
])
hist(weight[,12])
hist(weight[,13])
hist(weight[,14])
hist(weight[,15])
hist(weight[,16)
